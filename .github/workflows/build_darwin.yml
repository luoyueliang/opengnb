name: Build GNB For macOS

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

env:
  PROJECT: gnb
  BASE_URL: "https://download.mynet.club/gnb"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: darwin, platform: darwin, arch: amd64, makefile: Makefile.Darwin }
          - { os: darwin, platform: darwin, arch: arm64, makefile: Makefile.Darwin }

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Extract tag
        id: tag
        run: echo "tag=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Install dependencies (Homebrew)
        run: |
          brew update
          brew install cmake ninja || true

      - name: Modify Makefile for macOS static preferences
        run: |
          MF="src/${{ matrix.makefile }}"
          if [ -f "$MF" ]; then
            # BSD sed requires an explicit backup suffix or ''
            sed -i '' 's|-static||g' "$MF" || true
          fi

      - name: Build
        run: |
          # Select architecture-specific compilers
          case "${{ matrix.arch }}" in
            amd64)
              export CC="clang -arch x86_64"
              export CXX="clang++ -arch x86_64"
              ;;
            arm64)
              export CC="clang -arch arm64"
              export CXX="clang++ -arch arm64"
              ;;
          esac
          export LD=ld
          export AR=ar
          export RANLIB=ranlib

          OUT_DIR="$GITHUB_WORKSPACE/.out/${{ steps.tag.outputs.tag }}/${{ matrix.os }}/${{ matrix.arch }}"
          PKG_DIR="$GITHUB_WORKSPACE/.pkg/${{ steps.tag.outputs.tag }}"
          mkdir -p "$OUT_DIR" "$PKG_DIR"

          make -C src -f "${{ matrix.makefile }}" clean
          make -C src -f "${{ matrix.makefile }}" install
          if [ -d src/bin ]; then mv src/bin/* "$OUT_DIR/"; elif [ -d bin ]; then mv bin/* "$OUT_DIR/"; fi

      - name: Package
        run: |
          OUT_DIR="$GITHUB_WORKSPACE/.out/${{ steps.tag.outputs.tag }}/${{ matrix.os }}/${{ matrix.arch }}"
          PKG_DIR="$GITHUB_WORKSPACE/.pkg/${{ steps.tag.outputs.tag }}"
          ARCHIVE="${PROJECT}_${{ matrix.os }}_${{ matrix.arch }}_${{ steps.tag.outputs.tag }}.tar.gz"
          tar -czvf "$ARCHIVE" -C "$OUT_DIR" .
          mv "$ARCHIVE" "$PKG_DIR/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gnb-${{ matrix.os }}-${{ matrix.arch }}
          path: .pkg/${{ steps.tag.outputs.tag }}/*

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: .release/

      - name: Flatten artifacts
        run: |
          mkdir -p .release/flat
          find .release -type f -name "*.tar.gz" -exec mv {} .release/flat/ \;

      - name: Generate checksums
        run: |
          cd .release/flat
          sha256sum $(ls | grep -v '^checksums.txt$') > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: .release/flat/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to download.mynet.club
        run: |
          if [ -z "${DOWNLOAD_SSH_HOST:-}" ] || [ -z "${DOWNLOAD_SSH_USER:-}" ] || [ -z "${DOWNLOAD_SSH_KEY:-}" ] || [ -z "${DOWNLOAD_SSH_REMOTE_DIR:-}" ]; then
            echo "SSH upload skipped (secrets not configured)."
            exit 0
          fi
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$DOWNLOAD_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          rsync -avz --delete .release/flat/ ${DOWNLOAD_SSH_USER}@${DOWNLOAD_SSH_HOST}:${DOWNLOAD_SSH_REMOTE_DIR}/
