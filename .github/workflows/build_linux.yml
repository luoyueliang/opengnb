name: Build GNB For Linux, OpenWrt

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

env:
  PROJECT: gnb
  BASE_URL: "https://download.mynet.club/gnb"  

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - { os: linux, platform: linux, arch: amd64,        makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: arm64,        makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: armv7-softfp, makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: armv7-hardfp, makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: mips,         makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: mipsel,       makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: mips64,       makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: mips64el,     makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: riscv64,      makefile: Makefile.linux }
          # OpenWrt
          - { os: openwrt, platform: linux, arch: amd64,        makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: arm64,        makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: armv7-softfp, makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: armv7-hardfp, makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: mips,         makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: mipsel,       makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: mips64,       makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: mips64el,     makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: riscv64,      makefile: Makefile.openwrt }

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Extract tag
        id: tag
        run: echo "tag=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        if: matrix.os != 'darwin'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config wget curl git ca-certificates xz-utils tar
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf || true
          sudo apt-get install -y gcc-mips-linux-gnu gcc-mipsel-linux-gnu gcc-mips64-linux-gnuabi64 gcc-mips64el-linux-gnuabi64 || true
          sudo apt-get install -y gcc-riscv64-linux-gnu || true

      

      - name: Cache OpenWrt musl toolchains
        if: matrix.os == 'openwrt'
        uses: actions/cache@v3
        with:
          path: /tmp/musl-cross-${{ matrix.arch }}
          key: openwrt-musl-${{ matrix.arch }}-${{ runner.os }}-v1
      
      
          
      - name: Setup cross compiler and static flags
        run: |
          MF="src/${{ matrix.makefile }}"
          # Cross compiler
          case "${{ matrix.arch }}" in
            amd64)        export CC=gcc ;;
            arm64)        export CC=aarch64-linux-gnu-gcc ;;
            armv7-softfp) export CC=arm-linux-gnueabihf-gcc ;;
            armv7-hardfp) export CC=arm-linux-gnueabihf-gcc ;;
            mips)         export CC=mips-linux-gnu-gcc ;;
            mipsel)       export CC=mipsel-linux-gnu-gcc ;;
            mips64)       export CC=mips64-linux-gnuabi64-gcc ;;
            mips64el)     export CC=mips64el-linux-gnuabi64-gcc ;;
            riscv64)      export CC=riscv64-linux-gnu-gcc ;;
          esac

          export CXX=${CC/gcc/g++}
          export AR=${CC/gcc/ar}
          export RANLIB=${CC/gcc/ranlib}

          # Static linking tweaks (only linux/openwrt)
          case "${{ matrix.os }}" in
            linux|openwrt)
              if [ -f "$MF" ]; then
                sed -i "s|\(${CC} -o ${GNB_CTL}\)|\1 -static|g" "$MF" || true
                sed -i "s|\(${CC} -o ${GNB_ES}\)|\1 -static|g" "$MF" || true
                sed -i "s|\(${CC} -o ${GNB_CRYPTO}\)|\1 -static|g" "$MF" || true
                sed -i "s|\(${CC} -o ${GNB_CLI}\)|\1 -static|g" "$MF" || true
              fi
              ;;
          esac

          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "RANLIB=$RANLIB" >> $GITHUB_ENV

      - name: Build
        run: |
          OUT_DIR="$GITHUB_WORKSPACE/.out/${{ steps.tag.outputs.tag }}/${{ matrix.os }}/${{ matrix.arch }}/bin"
          PKG_DIR="$GITHUB_WORKSPACE/.pkg/${{ steps.tag.outputs.tag }}"
          mkdir -p "$OUT_DIR" "$PKG_DIR"

          make -C src -f "${{ matrix.makefile }}" clean
          make -C src -f "${{ matrix.makefile }}" install
          if [ -d src/bin ]; then mv src/bin/* "$OUT_DIR/"; elif [ -d bin ]; then mv bin/* "$OUT_DIR/"; fi

      - name: Package
        run: |
          OUT_PARENT="$GITHUB_WORKSPACE/.out/${{ steps.tag.outputs.tag }}/${{ matrix.os }}/${{ matrix.arch }}"
          PKG_DIR="$GITHUB_WORKSPACE/.pkg/${{ steps.tag.outputs.tag }}"
          ARCHIVE="${PROJECT}_${{ matrix.os }}_${{ matrix.arch }}_${{ steps.tag.outputs.tag }}.tgz"
          tar -czvf "$ARCHIVE" -C "$OUT_PARENT" bin
          mv "$ARCHIVE" "$PKG_DIR/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gnb-${{ matrix.os }}-${{ matrix.arch }}
          path: .pkg/${{ steps.tag.outputs.tag }}/*

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: .release/

      - name: Flatten artifacts
        run: |
          mkdir -p .release/flat
          find .release -type f -name "*.tgz" -exec mv {} .release/flat/ \;

      - name: Generate checksums
        run: |
          cd .release/flat
          sha256sum $(ls | grep -v '^checksums.txt$') > checksums.txt

      - name: Upload aggregated checksums artifact
        uses: actions/upload-artifact@v4
        with:
          name: checksums
          path: .release/flat/checksums.txt

      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          FILES=(.release/flat/*)
          echo "Publishing release assets for $TAG: ${FILES[*]}"
          echo "Trying upload with --clobber (if release missing, will create then retry)"
          if ! gh release upload "$TAG" "${FILES[@]}" --clobber --repo "${GITHUB_REPOSITORY}"; then
            echo "Upload failed (release may not exist). Creating release shell then retrying upload..."
            # Create release without assets; ignore failure if it already exists
            gh release create "$TAG" --title "Release $TAG" --generate-notes --repo "${GITHUB_REPOSITORY}" || true
            # Retry upload (will overwrite same-name only)
            gh release upload "$TAG" "${FILES[@]}" --clobber --repo "${GITHUB_REPOSITORY}"
          fi

      

      - name: Upload to remote via rsync
        if: startsWith(github.ref, 'refs/tags/')
        env:
          SSH_HOST: ${{ secrets.DOWNLOAD_SSH_HOST }}
          SSH_USER: ${{ secrets.DOWNLOAD_SSH_USER }}
          SSH_KEY: ${{ secrets.DOWNLOAD_SSH_KEY }}
          SSH_PORT: ${{ secrets.DOWNLOAD_SSH_PORT }}
          REMOTE_DIR: ${{ secrets.DOWNLOAD_SSH_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Upload debug: env summary"
          SRC_DIR=".release/flat"
          if [[ ! -d "$SRC_DIR" ]]; then
            echo "$SRC_DIR not found; nothing to upload"
            exit 0
          fi
          TAG="${{ github.ref_name }}"
          # Validate secrets
          if [[ -z "${SSH_HOST:-}" || -z "${SSH_USER:-}" || -z "${SSH_KEY:-}" || -z "${REMOTE_DIR:-}" ]]; then
            echo "SSH upload skipped (secrets not fully configured)."
            exit 0
          fi
          PORT="${SSH_PORT:-22}"
          DEST_DIR="${REMOTE_DIR%/}/${TAG}/"
          echo "TAG=$TAG"
          echo "SSH_HOST=$SSH_HOST PORT=$PORT"
          echo "DEST_DIR=$DEST_DIR"
          echo "Listing $SRC_DIR:"; ls -la "$SRC_DIR" || true; echo "Sizes:"; du -sh "$SRC_DIR"/* 2>/dev/null || true
          echo "::endgroup::"

          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Populate known_hosts for given host:port with all common key types and bracketed form for non-22
          if [[ "$PORT" != "22" ]]; then
            ssh-keyscan -p "$PORT" -t rsa,ecdsa,ed25519 "$SSH_HOST" \
              | awk -v h="$SSH_HOST" -v p="$PORT" '{ $1 = "["h"]:"p; print }' \
              >> ~/.ssh/known_hosts 2>/dev/null || true
          else
            ssh-keyscan -p "$PORT" -t rsa,ecdsa,ed25519 "$SSH_HOST" \
              >> ~/.ssh/known_hosts 2>/dev/null || true
          fi
          chmod 644 ~/.ssh/known_hosts || true
          echo "::group::Upload debug: known_hosts"
          echo "known_hosts entries:"; wc -l ~/.ssh/known_hosts || true; head -n 5 ~/.ssh/known_hosts || true
          echo "::endgroup::"

          SSH_OPTS="-i ~/.ssh/id_rsa -p $PORT -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts -o BatchMode=yes -o ConnectTimeout=15"
          echo "::group::Upload debug: SSH connectivity test (-vvv)"
          ssh -vvv $SSH_OPTS "$SSH_USER@$SSH_HOST" "echo 'SSH OK'; uname -a" || { echo "SSH connectivity failed"; exit 1; }
          echo "::endgroup::"

          echo "::group::Upload debug: prepare remote dir"
          ssh $SSH_OPTS "$SSH_USER@$SSH_HOST" "mkdir -p '$DEST_DIR' && echo 'Remote dir prepared: $DEST_DIR'"
          echo "::endgroup::"

          echo "::group::Upload debug: rsync dry-run (-n)"
          rsync -avzn --delete -e "ssh $SSH_OPTS" "$SRC_DIR/" "$SSH_USER@$SSH_HOST:$DEST_DIR" || { echo "rsync dry-run failed"; exit 1; }
          echo "::endgroup::"

          echo "::group::Upload: rsync real run"
          rsync -avz -e "ssh $SSH_OPTS" "$SRC_DIR/" "$SSH_USER@$SSH_HOST:$DEST_DIR"
          echo "::endgroup::"