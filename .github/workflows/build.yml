name: Build GNB

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

env:
  PROJECT: gnb
  BASE_URL: "https://download.mynet.club/gnb"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - { os: linux, platform: linux, arch: amd64,        makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: arm64,        makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: armv7-softfp, makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: armv7-hardfp, makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: mips,         makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: mipsel,       makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: mips64,       makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: mips64el,     makefile: Makefile.linux }
          - { os: linux, platform: linux, arch: riscv64,      makefile: Makefile.linux }
          # OpenWrt
          - { os: openwrt, platform: linux, arch: amd64,        makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: arm64,        makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: armv7-softfp, makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: armv7-hardfp, makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: mips,         makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: mipsel,       makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: mips64,       makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: mips64el,     makefile: Makefile.openwrt }
          - { os: openwrt, platform: linux, arch: riscv64,      makefile: Makefile.openwrt }
          # Darwin
          - { os: darwin, platform: darwin, arch: amd64, makefile: Makefile.Darwin, runner: macos-latest }
          - { os: darwin, platform: darwin, arch: arm64, makefile: Makefile.Darwin, runner: macos-latest }
          # Windows
          - { os: windows, platform: windows, arch: amd64, makefile: Makefile.mingw_x86_64, runner: windows-latest }
          - { os: windows, platform: windows, arch: 386,   makefile: Makefile.mingw_x86_64, runner: windows-latest }
          - { os: windows, platform: windows, arch: arm64, makefile: Makefile.mingw_x86_64, runner: windows-latest }
          # FreeBSD
          - { os: freebsd, platform: freebsd, arch: amd64, makefile: Makefile.freebsd, runner: freebsd-13 }
          - { os: freebsd, platform: freebsd, arch: arm64, makefile: Makefile.freebsd, runner: freebsd-13 }
          - { os: openbsd, platform: openbsd, arch: amd64, makefile: Makefile.openbsd, runner: openbsd-7 }

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: luoyueliang/gnb
          token: ${{ secrets.PRIVATE_REPO_PAT }}

      - name: Extract tag
        id: tag
        run: echo "tag=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        if: matrix.os != 'darwin'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config wget curl git ca-certificates xz-utils tar
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf || true
          sudo apt-get install -y gcc-mips-linux-gnu gcc-mipsel-linux-gnu gcc-mips64-linux-gnuabi64 gcc-mips64el-linux-gnuabi64 || true
          sudo apt-get install -y gcc-riscv64-linux-gnu || true

      - name: Install dependencies (macOS)
        if: matrix.os == 'darwin'
        run: |
          if ! command -v brew >/dev/null 2>&1; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $GITHUB_ENV
            eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          brew update
          brew install cmake ninja || true

      - name: Cache OpenWrt musl toolchains
        if: matrix.os == 'openwrt'
        uses: actions/cache@v3
        with:
          path: /tmp/musl-cross-${{ matrix.arch }}
          key: openwrt-musl-${{ matrix.arch }}-${{ runner.os }}-v1
      
      - name: Setup Windows toolchain
        if: matrix.os == 'windows'
        run: |
          # 设置 windres（Windows 资源编译器）
          export WINDRES=${CC/gcc/windres}
          # 确保 .rc 文件可读
          chmod +r ./src/mingw/gnb_res.rc
          
      - name: Setup cross compiler and static flags
        run: |
          # Cross compiler
          case "${{ matrix.arch }}" in
            amd64)        export CC=gcc ;;
            arm64)        export CC=aarch64-linux-gnu-gcc ;;
            armv7-softfp) export CC=arm-linux-gnueabihf-gcc ;;
            armv7-hardfp) export CC=arm-linux-gnueabihf-gcc ;;
            mips)         export CC=mips-linux-gnu-gcc ;;
            mipsel)       export CC=mipsel-linux-gnu-gcc ;;
            mips64)       export CC=mips64-linux-gnuabi64-gcc ;;
            mips64el)     export CC=mips64el-linux-gnuabi64-gcc ;;
            riscv64)      export CC=riscv64-linux-gnu-gcc ;;
          esac

          export CXX=${CC/gcc/g++}
          export AR=${CC/gcc/ar}
          export RANLIB=${CC/gcc/ranlib}

          # Static linking tweaks
          case "${{ matrix.os }}" in
            linux|freebsd|openwrt|windows)
              sed -i "s|\(${CC} -o ${GNB_CTL}\)|\1 -static|g" ${{ matrix.makefile }} || true
              sed -i "s|\(${CC} -o ${GNB_ES}\)|\1 -static|g" ${{ matrix.makefile }} || true
              sed -i "s|\(${CC} -o ${GNB_CRYPTO}\)|\1 -static|g" ${{ matrix.makefile }} || true
              sed -i "s|\(${CC} -o ${GNB_CLI}\)|\1 -static|g" ${{ matrix.makefile }} || true
              ;;
            darwin)
              sed -i '' 's|-static||g' ${{ matrix.makefile }} || true
              sed -i '' 's|-lssl|-l:libssl.a|g' ${{ matrix.makefile }} || true
              sed -i '' 's|-lcrypto|-l:libcrypto.a|g' ${{ matrix.makefile }} || true
              sed -i '' 's|-lz|-l:libz.a|g' ${{ matrix.makefile }} || true
              ;;
          esac

          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "RANLIB=$RANLIB" >> $GITHUB_ENV

      - name: Build
        run: |
          OUT_DIR="$GITHUB_WORKSPACE/.out/${{ steps.tag.outputs.tag }}/${{ matrix.os }}/${{ matrix.arch }}"
          PKG_DIR="$GITHUB_WORKSPACE/.pkg/${{ steps.tag.outputs.tag }}"
          mkdir -p "$OUT_DIR" "$PKG_DIR"

          make -f "${{ matrix.makefile }}" clean
          make -f "${{ matrix.makefile }}" install
          if [ -d bin ]; then mv bin/* "$OUT_DIR/"; fi

      - name: Package
        run: |
          OUT_DIR="$GITHUB_WORKSPACE/.out/${{ steps.tag.outputs.tag }}/${{ matrix.os }}/${{ matrix.arch }}"
          PKG_DIR="$GITHUB_WORKSPACE/.pkg/${{ steps.tag.outputs.tag }}"
          ARCHIVE="${PROJECT}_${{ matrix.os }}_${{ matrix.arch }}_${{ steps.tag.outputs.tag }}.tar.gz"
          tar -czvf "$ARCHIVE" -C "$OUT_DIR" .
          mv "$ARCHIVE" "$PKG_DIR/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gnb-${{ matrix.os }}-${{ matrix.arch }}
          path: .pkg/${{ steps.tag.outputs.tag }}/*

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: .release/

      - name: Flatten artifacts
        run: |
          mkdir -p .release/flat
          find .release -type f -name "*.tar.gz" -exec mv {} .release/flat/ \;

      - name: Generate checksums
        run: |
          cd .release/flat
          sha256sum $(ls | grep -v '^checksums.txt$') > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: .release/flat/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to download.mynet.club
        run: |
          if [ -z "${DOWNLOAD_SSH_HOST:-}" ] || [ -z "${DOWNLOAD_SSH_USER:-}" ] || [ -z "${DOWNLOAD_SSH_KEY:-}" ] || [ -z "${DOWNLOAD_SSH_REMOTE_DIR:-}" ]; then
            echo "SSH upload skipped (secrets not configured)."
            exit 0
          fi
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$DOWNLOAD_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          rsync -avz --delete .release/flat/ ${DOWNLOAD_SSH_USER}@${DOWNLOAD_SSH_HOST}:${DOWNLOAD_SSH_REMOTE_DIR}/